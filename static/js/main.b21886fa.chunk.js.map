{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["wrap","i","i_max","App","ref","useRef","useEffect","current","ctx","getContext","gen","colors","walk","initial","pos","t","ct","fillStyle","length","fillRect","Math","pow","cos","sin","random","walkers","setInterval","forEach","walker","className","height","width","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"yLAGA,SAASA,EAAKC,EAAGC,GACf,OAASD,EAAIC,EAASA,GAASA,EA4ElBC,MAxEf,WACE,IAAMC,EAAMC,mBAgEZ,OA/DAC,qBAAU,WACR,GAAIF,EAAIG,QAAS,CACf,IAAMC,EAAMJ,EAAIG,QAAQE,WAAW,MAInC,SAASC,EAAIC,GAA+C,IAAvCC,EAAsC,uDAA/B,CAAC,IAAM,IAAMC,EAAkB,uDAAR,CAAC,EAAG,GACjDC,EAAG,YAAOD,GACVE,EAAI,EACJC,EAAK,EACT,OAAO,WACLR,EAAIS,UAAYN,EAAOK,EAAKL,EAAOO,QACnCV,EAAIW,SACFL,EAAI,GACF,IACEM,KAAKC,IAAID,KAAKE,IAAIN,GAAM,IAAOI,KAAKG,IAAIP,EAAK,OAAU,GACvDI,KAAKG,IAAIR,GACbD,EAAI,GACF,IACEM,KAAKC,IAAID,KAAKE,IAAIN,GAAM,IAAOI,KAAKG,IAAIP,EAAK,OAAU,GACvDI,KAAKE,IAAIP,GACbK,KAAKI,UACF,IAAM,GAAKJ,KAAKG,IAAIP,EAAK,MAC1BI,KAAKC,IAAID,KAAKG,IAAIP,EAAK,KAAM,GAC7B,GACFI,KAAKI,UACF,IAAM,GAAKJ,KAAKG,IAAIP,EAAK,MAC1BI,KAAKC,IAAID,KAAKG,IAAIP,EAAK,KAAM,GAC7B,IAEJF,EAAI,GAAKd,EAAKc,EAAI,GAjCd,IAiC4BM,KAAKI,SAAWZ,EAAK,IAAK,MAC1DE,EAAI,GAAKd,EAAKc,EAAI,GAlCd,IAkC4BM,KAAKI,SAAWZ,EAAK,IAAK,KAC1DG,GAAK,IACLC,KA9BJR,EAAIS,UAAY,OAChBT,EAAIW,SAAS,EAAG,EAAG,KAAM,KAgCzB,IAAMM,EAAU,CACdf,EAAI,CAAC,OAAQ,QAAS,CAAC,GAAK,IAAM,CAAC,IAAK,MACxCA,EAAI,CAAC,QAAS,aAAc,CAAC,GAAK,KAAO,CAAC,IAAK,MAC/CA,EAAI,CAAC,MAAO,WAAY,CAAC,GAAK,IAAM,CAAC,IAAM,MAC3CA,EAAI,CAAC,SAAU,UAAW,CAAC,IAAM,IAAM,CAAC,IAAM,MAC9CA,EAAI,CAAC,OAAQ,UAAW,CAAC,IAAM,KAAO,CAAC,KAAM,MAC7CA,EAAI,CAAC,OAAQ,SAAU,CAAC,IAAM,KAAO,CAAC,IAAK,MAC3CA,EAAI,CAAC,OAAQ,OAAQ,CAAC,IAAM,KAAO,CAAC,IAAK,MACzCA,EAAI,CAAC,WAAY,WAAY,CAAC,IAAM,KAAO,CAAC,IAAK,OAEnDgB,aAAY,WACVD,EAAQE,SAAQ,SAACC,GAAD,OAAYA,SAC3B,IAEHF,aAAY,WACV,IAAK,IAAIzB,EAAI,EAAGA,EAAI,EAAGA,IACrBO,EAAIS,UAAY,OAChBT,EAAIW,SACsB,KAAvBC,KAAKI,SAAW,IACO,MAAvBJ,KAAKI,SAAW,IACjB,IACA,OAGH,OAEJ,IAED,qBAAKK,UAAU,MAAf,SACE,wBAAQzB,IAAKA,EAAK0B,OAAQ,IAAMC,MAAO,UC/D9BC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.b21886fa.chunk.js","sourcesContent":["import { useRef, useEffect } from \"react\";\n\n//credit https://stackoverflow.com/questions/3417183/modulo-of-negative-numbers\nfunction wrap(i, i_max) {\n  return ((i % i_max) + i_max) % i_max;\n}\n\nconst rando = 20;\nfunction App() {\n  const ref = useRef();\n  useEffect(() => {\n    if (ref.current) {\n      const ctx = ref.current.getContext(\"2d\");\n      ctx.fillStyle = \"#333\";\n      ctx.fillRect(0, 0, 1800, 1000);\n\n      function gen(colors, walk = [0.45, 0.4], initial = [0, 0]) {\n        let pos = [...initial];\n        let t = 0;\n        let ct = 0;\n        return () => {\n          ctx.fillStyle = colors[ct % colors.length];\n          ctx.fillRect(\n            pos[0] +\n              300 *\n                Math.pow(Math.cos(ct / (1000 * Math.sin(ct / 10000))), 2) *\n                Math.sin(t),\n            pos[1] +\n              300 *\n                Math.pow(Math.cos(ct / (1000 * Math.sin(ct / 10000))), 2) *\n                Math.cos(t),\n            Math.random() *\n              (200 + 30 * Math.sin(ct / 100)) *\n              Math.pow(Math.sin(ct / 100), 2) +\n              10,\n            Math.random() *\n              (200 + 30 * Math.sin(ct / 100)) *\n              Math.pow(Math.sin(ct / 100), 2) +\n              10\n          );\n          pos[0] = wrap(pos[0] + rando * (Math.random() - walk[0]), 1800);\n          pos[1] = wrap(pos[1] + rando * (Math.random() - walk[1]), 1000);\n          t += 0.01;\n          ct++;\n        };\n      }\n      const walkers = [\n        gen([\"blue\", \"navy\"], [0.5, 0.5], [600, 100]),\n        gen([\"green\", \"darkgreen\"], [0.5, 0.48], [400, 400]),\n        gen([\"red\", \"darkred\"], [0.5, 0.5], [1000, 400]),\n        gen([\"yellow\", \"orange\"], [0.49, 0.5], [1000, 400]),\n        gen([\"#f0f\", \"purple\"], [0.49, 0.49], [1100, 300]),\n        gen([\"#232\", \"black\"], [0.49, 0.49], [200, 200]),\n        gen([\"#249\", \"43a\"], [0.49, 0.49], [900, 400]),\n        gen([\"#2A1B0E \", \"#654321\"], [0.49, 0.49], [600, 500]),\n      ];\n      setInterval(() => {\n        walkers.forEach((walker) => walker());\n      }, 10);\n\n      setInterval(() => {\n        for (let i = 0; i < 3; i++) {\n          ctx.fillStyle = \"#333\";\n          ctx.fillRect(\n            (Math.random() - 0.1) * 2000,\n            (Math.random() - 0.1) * 1200,\n            150,\n            150\n          );\n        }\n      }, 10);\n    }\n  }, []);\n  return (\n    <div className=\"App\">\n      <canvas ref={ref} height={1000} width={1800} />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}